import asyncio
import logging
import re
from datetime import datetime
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiohttp import ClientTimeout, TCPConnector, ClientSession

from .config import load_token
from .keyboards import MAIN_MENU, ADMIN_MENU, groups_keyboard, schedule_management_keyboard, get_main_menu, dates_keyboard, groups_for_date_keyboard
from .storage import init_storage, get_schedule_for_group
from .parser import init_db, save_table_to_db, WordParser, get_all_dates, get_all_groups, get_schedule_for_group
from .file_manager import save_schedule_file, get_schedule_files, cleanup_old_schedules, get_schedule_stats
from .admin_auth import is_admin
from .parser_site import download_schedule_by_link_text, admin_notify, bot_instance 


async def on_start(message: Message):
    menu = get_main_menu(message.from_user.id)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=menu,
    )


async def on_get_id(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    first_name = message.from_user.first_name or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    
    text = f"""üÜî <b>–í–∞—à Telegram ID:</b>

üë§ <b>ID:</b> <code>{user_id}</code>
üìù <b>–ò–º—è:</b> {first_name}
üè∑Ô∏è <b>Username:</b> @{username}

<b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:</b>
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_IDS –≤ —Ñ–∞–π–ª–µ .env:
<code>ADMIN_IDS={user_id}</code>

<b>–ò–ª–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤:</b>
<code>ADMIN_IDS={user_id},123456789,987654321</code>"""
    
    await message.answer(text, parse_mode="HTML")


async def on_admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        menu = get_main_menu(message.from_user.id)
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
            reply_markup=menu
        )
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=ADMIN_MENU
    )


async def on_upload_schedule(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await message.answer(
        "üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.\n"
        "–§–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –ø–æ –¥–∞—Ç–µ.",
        parse_mode="HTML"
    )


async def on_schedule_management(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await message.answer(
        "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=schedule_management_keyboard()
    )

async def on_check_schedule(message: Message):
    date_str = datetime.now().strftime("%d %B")
    await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    await download_schedule_by_link_text(
        "http://egorlyk-college.ru/%d1%80%d0%b0%d1%81%d0%bf%d0%b8%d1%81%d0%b0%d0%bd%d0%b8%d0%b5/",
        save_schedule_file,
        admin_notify,
        bot_instance,
        date_str
    )
    await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")

async def on_back_to_main(message: Message):
    menu = get_main_menu(message.from_user.id)
    
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=menu
    )


async def on_show_schedule(message: Message):
    dates = get_all_dates()
    if not dates:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=dates_keyboard(dates))


async def on_groups_pagination(callback: CallbackQuery):
    try:
        _, _, page_str = callback.data.split(":", 2)
        page = int(page_str)
    except Exception:
        page = 0
    await callback.message.edit_reply_markup(reply_markup=groups_keyboard(page=page))
    await callback.answer()


def extract_pair_number(pair: str) -> int:
    if not pair:
        return 999
    match = re.match(r"(\d+)-(\d+)", pair)
    if match:
        start = int(match.group(1))
        return (start + 1) // 2
    return 999


def format_time(time_str: str) -> str:
    if not time_str:
        return "‚Äî"
    
    match = re.match(r"(\d{4})\s*‚Äì\s*(\d{4})", time_str)
    if match:
        start, end = match.groups()
        try:
            start_h = int(start[:2])
            start_m = int(start[2:])
            end_h = int(end[:2])
            end_m = int(end[2:])
            
            if 0 <= start_h <= 23 and 0 <= start_m <= 59 and 0 <= end_h <= 23 and 0 <= end_m <= 59:
                return f"{start_h:02d}:{start_m:02d} - {end_h:02d}:{end_m:02d}"
        except (ValueError, IndexError):
            pass
    
    return time_str


async def on_group_selected(callback: CallbackQuery):
    group_name = callback.data.split(":", 1)[1]
    await callback.answer()
    items = get_schedule_for_group(group_name)
    if not items:
        await callback.message.answer(
            f"‚ùå –î–ª—è –≥—Ä—É–ø–ø—ã <b>{group_name}</b> —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.",
            parse_mode="HTML",
        )
        return

    from collections import defaultdict
    by_date = defaultdict(list)
    for it in items:
        by_date[(it.get("date"), it.get("weekday"))].append(it)

    lines = []
    
    lines.append(f"üéì <b>–†–ê–°–ü–ò–°–ê–ù–ò–ï –ì–†–£–ü–ü–´ {group_name}</b>")
    lines.append("‚îÅ" * 30)
    
    for (date, weekday), arr in by_date.items():
        lines.append(f"\nüìÖ <b>{date or ''} {weekday or ''}</b>")
        lines.append("‚îÄ" * 25)
        
        arr_sorted = sorted(arr, key=lambda x: extract_pair_number(x.get("pair", "")))
        
        for it in arr_sorted:
            pair = it.get("pair") or "‚Äî"
            time = format_time(it.get("time", ""))
            subj = it.get("subject") or ""
            teacher = it.get("teacher") or ""
            room = it.get("room") or ""
            
            pair_num = extract_pair_number(pair)
            if pair_num != 999:
                pair_display = f"üî¢ {pair_num} –ø–∞—Ä–∞"
            else:
                pair_display = f"üî¢ {pair}"
            
            if room:
                room_text = f"üè¢ –∞—É–¥. {room}"
            else:
                room_text = "üè¢ –∞—É–¥. –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            if teacher:
                teacher_text = f"üë®‚Äçüè´ {teacher}"
            else:
                teacher_text = "üë®‚Äçüè´ –Ω–µ —É–∫–∞–∑–∞–Ω"
            
            lines.append(f"{pair_display}")
            lines.append(f"‚è∞ {time}")
            lines.append(f"üìö <b>{subj}</b>")
            lines.append(f"{teacher_text}")
            lines.append(f"{room_text}")
            lines.append("")

    text = "\n".join(lines) if lines else "üìù –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π"
    await callback.message.answer(text, parse_mode="HTML")


async def on_date_selected(callback: CallbackQuery):
    date = callback.data.split(":", 1)[1]
    all_groups = get_all_groups()
    groups = []
    for group in all_groups:
        lessons = [l for l in get_schedule_for_group(group) if l['date'] == date]
        if lessons:
            groups.append(group)
    if not groups:
        await callback.message.answer(f"‚ùå –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {date}")
        return
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞ <b>{date}</b>:", parse_mode="HTML", reply_markup=groups_for_date_keyboard(groups, date))
    await callback.answer()


async def on_group_on_date(callback: CallbackQuery):
    _, date, group = callback.data.split(":", 2)
    lessons = [l for l in get_schedule_for_group(group) if l['date'] == date]
    if not lessons:
        await callback.message.answer(f"‚ùå –î–ª—è –≥—Ä—É–ø–ø—ã <b>{group}</b> –Ω–∞ {date} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML")
        return
    dates = get_all_dates()
    idx = dates.index(date) if date in dates else 0
    prev_date = dates[idx-1] if idx > 0 else None
    next_date = dates[idx+1] if idx < len(dates)-1 else None
    lines = [f"üìÖ <b>{date}</b> | üß© <b>{group}</b>", "‚îÅ"*30]
    for l in sorted(lessons, key=lambda x: (x['pair'] or '999')):
        lines.append(f"üî¢ <b>{l['pair'] or '‚Äî'}</b>  ‚è∞ {l['time'] or '‚Äî'}")
        lines.append(f"üìö <b>{l['subject']}</b>")
        if l['teacher']:
            lines.append(f"üë®‚Äçüè´ {l['teacher']}")
        if l['room']:
            lines.append(f"üè¢ {l['room']}")
        lines.append("‚îÄ"*15)
    nav = []
    if prev_date:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥. –¥–∞—Ç–∞", callback_data=f"group_on_date:{prev_date}:{group}"))
    nav.append(InlineKeyboardButton(text="üîô –ö –¥–∞—Ç–∞–º", callback_data="back_to_dates"))
    if next_date:
        nav.append(InlineKeyboardButton(text="–°–ª–µ–¥. –¥–∞—Ç–∞ ‚û°Ô∏è", callback_data=f"group_on_date:{next_date}:{group}"))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[nav])
    await callback.message.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


async def on_dates_page(callback: CallbackQuery):
    page = int(callback.data.split(":", 1)[1])
    dates = get_all_dates()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=dates_keyboard(dates, page=page))
    await callback.answer()


async def on_back_to_dates(callback: CallbackQuery):
    dates = get_all_dates()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=dates_keyboard(dates))
    await callback.answer()


async def on_admin_callback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    action = callback.data.split(":", 1)[1]
    await callback.answer()
    
    if action == "view_dates":
        files = get_schedule_files()
        if files:
            text = "üìÖ <b>–§–∞–π–ª—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</b>\n\n"
            for filename, create_time in files[:10]:
                text += f"üìÑ {filename}\n"
                text += f"üïí {create_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        else:
            text = "üìù –§–∞–π–ª—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        await callback.message.answer(text, parse_mode="HTML")
    
    elif action == "cleanup_old":
        deleted_count, message = cleanup_old_schedules()
        await callback.message.answer(message)
    
    elif action == "stats":
        stats = get_schedule_stats()
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</b>

üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}
üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {stats['current_week_files']}
üóëÔ∏è –°—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {stats['old_files']}

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:</b>"""
        
        for filename, create_time in stats['files']:
            text += f"\nüìÑ {filename}"
            text += f"\nüïí {create_time.strftime('%d.%m.%Y %H:%M')}"
        
        await callback.message.answer(text, parse_mode="HTML")
    
    elif action == "reload_db":
        await callback.message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        try:
            init_db()
            await callback.message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
    
    elif action == "back":
        await callback.message.answer(
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=ADMIN_MENU
        )


async def on_document_received(message: Message, bot: Bot):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if not message.document:
        await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not message.document.file_name.lower().endswith('.docx'):
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ DOCX —Ñ–∞–π–ª—ã")
        return
    
    await message.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    
    try:
        file_info = await bot.get_file(message.document.file_id)
        file_path = Path(__file__).parent / "temp_schedule.docx"
        
        await bot.download_file(file_info.file_path, file_path)
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
        current_date = datetime.now().strftime("%d %B").replace("January", "—è–Ω–≤–∞—Ä—è").replace("February", "—Ñ–µ–≤—Ä–∞–ª—è").replace("March", "–º–∞—Ä—Ç–∞").replace("April", "–∞–ø—Ä–µ–ª—è").replace("May", "–º–∞—è").replace("June", "–∏—é–Ω—è").replace("July", "–∏—é–ª—è").replace("August", "–∞–≤–≥—É—Å—Ç–∞").replace("September", "—Å–µ–Ω—Ç—è–±—Ä—è").replace("October", "–æ–∫—Ç—è–±—Ä—è").replace("November", "–Ω–æ—è–±—Ä—è").replace("December", "–¥–µ–∫–∞–±—Ä—è")
        
        success, message_text = await save_schedule_file(file_path, current_date)

        
        if success:
            await message.answer("üîÑ –ü–∞—Ä—Å–∏—Ä—É—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
            try:
                with WordParser(str(file_path)) as doc:
                    tables = doc.get_tables()
                    count = 0
                    for table in tables:
                        if save_table_to_db(table):
                            count += 1
                await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} —Ç–∞–±–ª–∏—Ü!")
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        else:
            await message.answer(f"‚ùå {message_text}")
        
        if file_path.exists():
            file_path.unlink()
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")


async def preload_from_docx_if_present() -> None:
    docx_path = Path(__file__).with_name("file.docx")
    if docx_path.exists():
        logging.info(f"–ù–∞–π–¥–µ–Ω DOCX —Ñ–∞–π–ª: {docx_path}")
        init_db()
        
        from .parser import main as parse_main
        parse_main()
        logging.info("–î–∞–Ω–Ω—ã–µ –∏–∑ DOCX –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ë–î")
    else:
        logging.info("DOCX —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î")


async def document_handler(message: Message, bot: Bot):
    await on_document_received(message, bot)


async def main() -> None:
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )
    
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    
    token = load_token()
    init_storage()
    await preload_from_docx_if_present()

    timeout = ClientTimeout(total=30, connect=10)

    dp = Dispatcher(storage=MemoryStorage())
    bot = Bot(
        token=token, 
        default=DefaultBotProperties(parse_mode="HTML"),
        session_timeout=timeout,
        connector=TCPConnector(family=2)
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.message.register(on_start, CommandStart())
    dp.message.register(on_get_id, Command("id"))
    dp.message.register(on_show_schedule, F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    dp.message.register(on_admin_panel, F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    dp.message.register(on_upload_schedule, F.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    dp.message.register(on_schedule_management, F.text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
    dp.message.register(on_check_schedule, F.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    dp.message.register(on_back_to_main, F.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    dp.message.register(document_handler, F.document)

    dp.callback_query.register(on_groups_pagination, F.data.startswith("groups:page:"))
    dp.callback_query.register(on_group_selected, F.data.startswith("group:"))
    dp.callback_query.register(on_admin_callback, F.data.startswith("admin:"))
    dp.callback_query.register(on_date_selected, F.data.startswith("date:"))
    dp.callback_query.register(on_group_on_date, F.data.startswith("group_on_date:"))
    dp.callback_query.register(on_dates_page, F.data.startswith("dates_page:"))
    dp.callback_query.register(on_back_to_dates, F.data == "back_to_dates")

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
